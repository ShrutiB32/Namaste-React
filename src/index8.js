//in this episode we will learn custom hooks
//before that in computer science engineering we have a principle calledd single responsibilty principle

//part 2 
//let us go tot restaurantMenu file : creating a custom hook is not a compulsory thing ,we create to make the code more readable ,modular,reusable
//so going to restaurantMenu.js there are 2 responsibilty it is handling i.e displaying the data amd getting the data , so in this file we have used const {id} = useParams(); here useParams is the utility function/hook and we are not worried hiw this hook is working to get the id so in the same way we can try to get the data data that is needed to be displayed in the menu from the custom hook and it can be called same like the useParams() i.e wen we use useRestaurantMenu cutom hook we get resInfo ,so will create the custom hook useRestaurantMenu which will fetch the data and give it to RestaurantMenu so now the restaurantMenu has single responsibilty i.e displaying menu on to the ui. So to create a custom hook we create a file in utils and we name the custom hook useRestaurantMenu . As react will understand that it is a hook by seeing the file name which starts with "use".so go tp useRestaurantMenu.js where we write a hook to get the data ,in this hook it just takes the restauranat id and just returns the data of that paricular id  ,then we need to export the hook so that we can use it everywhere and also we use the smae logic as we used to get the data from the api so we use useEffect hook to get the data.

//part 3 : Understanding more about custom hooks
//adding new feature of offline and online i.e our website should know whether the user's internet is active or inactive (we use this feature of online and offline in chat window where we see green dot if we are active and red if we are inactive ) . So where do we use this feature in this application where we can show something like looks like ur offline if the internet of the user is inactive.So to do this we create a useOnlineStatus file in utils(a custom hook). so to do this we dont require any parameter from the caller(caller is the component in which this component/hook is called). and in this custom hook we use the browser function to check whether we are online or offline ,the browser function is eventlistener and we use just once using useEffect.That is we put this event listener on to the webpage just once and keep tracking whether online or offline. we create a state variable taht keeps the state whether we are online or offline ,by default we will keep it true which means online and in window.addEventListener(if it is offline we change the state variable to false using setStateVariable and true if online).So to check this we call this hook in body component. now we can use this and build red and green dot also fr representing online and offline.

//part 4 
//it is recommended that to use "use" prefix for the custom hooks and to use capital letter at start of the component name.

//part 5 : How to optimize the code still more.
//we need to optimize because using bundler our all js files gets converted into single js file where the size increases , but we need to use bundler and nor we can call the files 1000 times so we can split the bundled files to small bundles and this is called CHUNKING and also known as code splitting ,lazyloading,dynamic bundling/importing ,on-demand loading. We do all thhese becuase our request to the js file shd not take more time

//to do this we will see makemytrip applicaton where they have different bundle for booking flights and different bundle for hotels so in the same way we can create a different bundle of components for insta mart in this swiggy applicaton. so for this we create a folder called grocery in the components folder which will create all the components in it.then in index6.js we make a route to grocery and creat ea link in the header.js also. but wen we see the output this grocery file also comes in same js file after bundling(usual mtd) ,because we are loading it in normal way ,to make it into different bundle we need to use lazy-loading or chunking and so on. So to do lazy loading we will use function lazy() which is provided by react package in index6.js and this function is named export.This lazy function takes the callback function and in that there is a import function which takes the path of the grocery and this import is not as same as the other import used to import packages or components or hooks on top of the file. So after running will get the error of compopnent suspended while responding to synchronous input this happens because wen we load this page we only have 1 js file which contains all the code of food ordering components and wen we go to grocery we get grocery code but it throws the above error because it takes some time say 12ms and react is very fast so it gives this error i.e react in thi sdelay of time react tries to find this component but it wont find so it throws this error .So to handle this we use "Suspense" it is a component coming from react library so we wrap our </Grocery> component with Suspense component in index6.js and give it fallback or placeholder attr to Suspense component . This fallback takes jsx(any compopnent) as the value .It is used wen create tries to load the grocery component,to show something till it gets that component



